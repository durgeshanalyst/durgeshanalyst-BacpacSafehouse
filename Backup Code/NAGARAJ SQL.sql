/*CRUD*/
/*
CREATE
READ
UPDATE
DELETE*/

--USECASE
CREATE --DATABASE
		 TABLE
		 VIEWS
		 STOREDPROC


CREATE DATABASE NAGRAJ_SQL
USE NAGRAJ_SQL
--CREATE--
CREATE TABLE STUDENTS(
ID INT PRIMARY KEY,
NAME VARCHAR(10) NOT NULL,
GENDER CHAR(1) NOT NULL
) 
---READ--
SELECT * FROM STUDENTS

ALTER-- USED TO ACTIVATE THE MODIFICATION OF YOUR TABLE OR VIEW

---CHANGING DATATYPE AND NORMAL CONSTRAINTS
ALTER TABLE STUDENTS ALTER COLUMN MARKS FLOAT NOT NULL


--ADDING PRIMARY KEY
ALTER TABLE STUDENTS ADD CONSTRAINT  PK__STUDENTS__3214EC27FFAB6A69 PRIMARY KEY (ID)


INSERT INTO STUDENTS  (ID, NAME, GENDER) VALUES (4, 'MOHAN', 'M')

SELECT * FROM STUDENTS

DROP TABLE STUDENTS

/*DML*/
--INSERT --- USED FOR INSERTING RECORDS INTO TABLE
--UPDATE --- UPDATE HELP US UPDATE THE TABLE RECORDS ON ANY COLUMN
--DELETE --- DELETE CAN REMOVE THE RECORD FROM TABLE

SELECT * FROM STUDENTS

--UPDATE
UPDATE --------------------TWO GIRL --SISTER THEY USED GO ANYWHERE TOGETHER 
SET---

UPDATE STUDENTS
SET NAME ='NAGRAJ'
WHERE ID =1

SELECT * FROM STUDENTS

BEGIN TRANSACTION
DELETE 
FROM STUDENTS
WHERE ID=1
ROLLBACK TRANSACTION


/*WHERE CLAUSE*/

SELECT * FROM STUDENTS
WHERE NAME LIKE '%M%'

select * from Customers

--PRINT CUSTOMER ID WHO JOINED BEFORE 05-2020

SELECT * FROM Customers WHERE DateEntered < (SELECT CAST('01-05-2020' AS DATE))

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='cUSTOMERS'

SELECT * FROM ORDERS
/*MATHEMATICAL FUNCTION*/
---SUM
---AVG
---MIN
---MAX
select * from orders

SELECT CUSTOMERID,paymentid, SUM(TOTAL_ORDER_AMOUNT) AS VALUESS
FROM ORDERS
GROUP BY CUSTOMERID,paymentid

---- RETURN ALL THE CUSTOMER AND THEIR TOTAL ORDER RAMOUNT , WHO HAS ORDERED MORE THAN 3 TIMES

SELECT CUSTOMERID , SUM(TOTAL_ORDER_AMOUNT) AS VALUESS
FROM ORDERS
GROUP BY CUSTOMERID
HAVING COUNT(CustomerID) > 10


SELECT CUSTOMERID , COUNT(CustomerID) AS CST
FROM ORDERS
GROUP BY CUSTOMERID
ORDER BY CST DESC


1 -- 5 20 , 240, 345, 34 345
2 ---5 20 , 240, 345, 34 345
3 --5 20 , 240, 345, 34 345
4  ---5 20 , 240, 345, 34 345


SELECT * FROM Orders
----RETURN CUSTOMER WITH THEIR ORDER VALUE WHO ORDERED MORE THAN FIVE TIME
SELECT CustomerID, COUNT(ORDERID) AS CNT,ROUND(SUM(Total_order_amount),2) AS ORDER_VALUE
FROM ORDERS
GROUP BY CustomerID
HAVING COUNT(ORDERID) > 5
ORDER BY ORDER_VALUE DESC

SELECT * FROM Customers

SELECT COUNT(CUSTOMERID) AS CNT, CASE WHEN Country= 'UNITED STATES'  THEN 'US'
						WHEN COUNTRY = 'GERMANY' THEN 'GE'
						ELSE Country
						END AS COUNTRY
FROM Customers
GROUP BY CASE WHEN Country= 'UNITED STATES'  THEN 'US'
						WHEN COUNTRY = 'GERMANY' THEN 'GE'
						ELSE Country
						END


/*Built in function*/
--string
SELECT SUBSTRING('Nagraj learning',5,3)


select 	substring('Durgesh Kumar',1,8)

select (left(CHARINDEX(' ','Durgesh Kumar'),1))  ----skip it


SELECT concat('nagraj',' ','is ', 'learning ','SQL')

select concat_ws('_', 'I','AM','Learning')


/*date function*/

select getdate()

select dateadd(month,6,getdate())

SELECT DATEDIFF(MONTH,'2022-09-01',GETDATE())

SELECT DATENAME(DAY,GETDATE())

SELECT DATEPART(MONTH,GETDATE())

SELECT FIRST(CUSTOMERID) FROM Customers


SELECT CAST(DATEDIFF(MONTH,'2022-09-01',GETDATE()) AS VARCHAR(1)) 

SELECT CONVERT(DATETIME,GETDATE(),109) AS DATES

SELECT CONVERT(INT,56.4) FROM CUSTOMERS


CREATE TABLE TWO(
ID INT
)

SELECT ID FROM ONE
EXCEPT
SELECT ID FROM TWO

/*JOIN
--REQUIREMENT OF JOIN IS TO FULLFILL THE CONNECTIION BETWEEN MORE THAT TWO TABLE
LEFT JOIN - LEFT OUTER JOIN
RIGHT JOIN RIGHT OUTER JOIN
INNER JOIN JOIN
FULL JOIN - FULL OUTER JOIN JOIN*/


SELECT * FROM Customers
SELECT * FROM Orders




SELECT C.FirstName,C.CustomerID,SUM(O.Total_order_amount) AS OV,SUM(OD.QUANTITY) AS QTY
FROM CUSTOMERS C LEFT JOIN ORDERS O ON C.CUSTOMERID=O.CUSTOMERID
				RIGHT JOIN  ORDERDETAILS OD ON OD.ORDERID=O.OrderID
GROUP BY C.CustomerID,C.FirstName





SELECT * FROM OrderDetails;
select * from orders

----return the cutsomerswho have order more than the average of total ordeer value;
select avg(Total_order_amount) from orders

select CustomerID--------------outer query
FROM  Orders
where Total_order_amount > (select avg(Total_order_amount) from orders); ---inner query

----RETURN ALL THE CUSTOMERS WHOSE toa IS GREATER THAN THE AVERAGE OF
----toa AND WHO HAS JOINED BETWEEN JAN 2020 AND FEB 2020

SELECT CUSTOMERID,DateEntered
FROM(
SELECT C.CustomerID,C.DateEntered,O.TOTAL_ORDER_AMOUNT
FROM CUSTOMERS C JOIN ORDERS O ON C.CUSTOMERID=O.CUSTOMERID
WHERE O.Total_order_amount > (select avg(Total_order_amount) from orders))D
WHERE DateEntered <= '2020-02-01'




---CTE  COMMON TABLE EXPRESSION, WITH CLAUSE
WITH AVERAGE_TOA AS(
select avg(Total_order_amount) AS AVERAGE_VALUE from orders),
CUSTOMERINFO AS(
SELECT * FROM ORDERS JOIN AVERAGE_TOA ON Total_order_amount > AVERAGE_VALUE
)
SELECT * FROM CUSTOMERINFO

