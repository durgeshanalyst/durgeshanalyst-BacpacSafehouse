CREATE DATABASE COMPLETE_SQL_IN_10_DAYS
USE COMPLETE_SQL_IN_10_DAYS

/*START WITH CRUD*/
/*CREATE , READ, UPDATE, DELETE*/

CREATE TABLE STUDENT (
ID INT,
NAME VARCHAR(10),
SECTION CHAR(1),
AGE INT,
GENDER CHAR(1),
)

select * from STUDENT

/*with constraints*/

CREATE TABLE STUDENTs (
ID INT PRIMARY KEY,
NAME VARCHAR(10) NOT NULL,
SECTION CHAR(1) NOT NULL,
AGE INT NOT NULL,
GENDER CHAR(1) NOT NULL,
)


SELECT * FROM STUDENT
SELECT * FROM STUDENTs

ALTER TABLE STUDENT ADD  ADDRESS VARCHAR(MAX)

---NEED TO CHECK ADD CONSTRAINTS

ALTER TABLE STUDENTs
ADD CONSTRAINT 'PK__STUDENTs__3214EC272D2871CC' PRIMARY KEY (ID);

--removing constraints
ALTER TABLE STUDENTs DROP CONSTRAINT  'PK__STUDENTs__3214EC2756674BE6'



DROP TABLE STUDENTs
SELECT * FROM STUDENTs

INSERT INTO STUDENT  (ID,NAME,SECTION,AGE,GENDER)
			VALUES(1,'BHAWNA','A',23,'F');

INSERT INTO STUDENT  (ID,NAME,SECTION,AGE,GENDER)
			VALUES(11,'DINESH','Z',23,'M');

	SELECT * FROM STUDENTs   


---UPDATE
BEGIN TRANSACTION
UPDATE STUDENTs
SET SECTION = 'Z'
WHERE NAME ='BHAWNA'
ROLLBACK TRANSACTION

/*DELETE*/
SELECT * FROM STUDENT
BEGIN TRANSACTION
DELETE FROM STUDENT 
WHERE ID=1
ROLLBACK TRANSACTION



SELECT * FROM STUDENTs

ALTER TABLE STUDENTS ALTER COLUMN AGE SMALLINT

SELECT * FROM STUDENTS
/*TO CHECK THE DATA TYPE*/

SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'STUDENTS'

/*DROPING CONSTRAINTS*/

ALTER TABLE STUDENTS DROP CONSTRAINT  PK__STUDENTs__3214EC272D2871CC

SELECT * FROM STUDENTs

SELECT * FROM STUDENT
WHERE ID = 11

SELECT * FROM ORDERS


SELECT * FROM Orders

---TO GET UNIQUE RECORD
SELECT COUNT(DISTINCT CUSTOMERID) AS COUNTS FROM Orders

---INTRODUCING ALIAS

AS --- ALIAS , AFTER AS YOU CAN WRITE YOUR OWN COLUMN NAME 


/*HOW MANY ORDER WAS PLACED BY EACH PAYMENT ID */

SELECT PAYMENTID , COUNT(OrderID) AS ORDERS
FROM Orders
GROUP BY PAYMENTID;


SELECT PAYMENTID, COUNT(ORDERID) FROM ORDERS
GROUP BY PAYMENTID  ---property , whatever column you are wriitng in the group by that should be select clause.



----WHAT IS THE TOTAL ORDER VALUE FOR EACH CUSTOMER
SELECT CUSTOMERID,COUNT(CUSTOMERID) AS QTY, ROUND(SUM(TOTAL_ORDER_AMOUNT),0) AS ORDER_VALUE
FROM Orders
GROUP BY CUSTOMERID


--what is the total order amount by each payment id--
SELECT PAYMENTID,
sum(total_order_amount) FROM ORDERS
GROUP BY PAYMENTID

/*count
sum
avg
max
min*/


SELECT PAYMENTID,
sum(total_order_amount) FROM ORDERS
where paymentid >2
GROUP BY PAYMENTID

select * from orders



SELECT *
FROM CUSTOMERS

/*GET THE NUMBER OF CUSTOMER FROM EACH COUNTRY*/
SELECT Country, COUNT(CUSTOMERID) AS CUSTOMERS FROM Customers
GROUP BY Country

SELECT City, COUNT(CUSTOMERID) AS CUSTOMERS FROM Customers
GROUP BY City
ORDER BY CUSTOMERS desc

/*HAVING*/

/*FIND ONLY THOSE ALL CUSTOMER AND THEIR PURCHASE AMOUNT WHO HAVE PURCHSED FROM MORE THAN 2 PAYMENT MODE*/


SELECT C.CustomerID,O.PAYMENTID, SUM(O.Total_order_amount) AS PURCHASED
FROM Orders O JOIN Customers C ON O.CustomerID=C.CustomerID
GROUP BY C.CustomerID, O.PAYMENTID
HAVING COUNT(O.PaymentID) > 2




/*Top 10 city where customer density is high*/

--4, 90, 89,79,40  ---90%  , BOTTOM --40

SELECT TOP 10 CITY, COUNT(CustomerID) AS COUNTS
FROM Customers
GROUP BY City
ORDER BY COUNTS DESC 

/*congratulation on completing the Basic SQL*/
--BUILD FUNCTION
/*STRING BUILT IN*/

'BHAWNA'

SELECT REVERSE('BHAWNA')

print(REVERSE('BHAWNA'))

print(right('bhawna',2))

PRINT(LEFT('BHAWANA',2))

PRINT REVERSE((RIGHT(REVERSE('BHAWNA'),2)))



LIKE %N
NAME
NAMAN

WHERE RIGHT(NAME,2)='AN'


/*date,math,advance built in function*/

SELECT * FROM Customers

PRINT(DATEADD(YEAR,-7,GETDATE()))

SELECT DATEADD(DAY,5,DateEntered)
FROM Customers

SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CUSTOMERS'

SELECT CAST(DateEntered AS varchar(10))
FROM Customers

SELECT CONVERT(varchar,cast(DateEntered as varchar(10)),23)
FROM Customers


select dayname(day,dateentered) from Customers


select coalesce(null,'radhe',null)


SELECT * FROM Customers


CREATE TABLE FOR_SET(
ID INT,
NAME CHAR(1)
)

INSERT INTO FOR_SET1 VALUES
(1,'A'),
(2,'B'),
(3,'C'),
(4,'D'),
(5,'E')

CREATE TABLE FOR_SET1(
ID INT,
NAME CHAR(1)
)


SELECT * FROM FOR_SET1
EXCEPT
SELECT * FROM FOR_SET


/*JOIN*/

--TABLE1 ---STUDENTS 
--TABLE2 ----COURSE DETAILS
--REQUIREMENT STUDENTS AND THEIR COURSE 

--INNER JOIN:- TABLE1 JOIN TABLE 2  ---
--LEFT JOIN :- TABLE1 LEFT JOIN TABLE 2   ---LEFT OUTER JOIN
---RIGHT JOIN :- TABLE1 RIGHT JOIN TABLE 2 ---RIGHT OUTER JOIN
---FULL OUTER JOIN

--LETS BEGIN--
/*THERE SHOULD BE COLUMN HAVING SAME RECORDS*/
SELECT C.FirstName,C.CustomerID,C.Phone,O.OrderID,O.OrderDate,O.Total_order_amount
FROM Customers C JOIN ORDERS O ON  C.CustomerID = O.CustomerID

SELECT C.FirstName,C.CustomerID,C.Phone,O.OrderID,O.OrderDate,O.Total_order_amount
FROM Customers C LEFT JOIN ORDERS O ON  C.CustomerID = O.CustomerID


SELECT F.ID,F1.ID
FROM FOR_SET F FULL OUTER JOIN FOR_SET1 F1 ON F.ID=F1.ID

INSERT INTO FOR_SET VALUES (6,'E')


/*view*/
CREATE OR ALTER VIEW ORDER_INFO AS
SELECT F.ID,F1.NAME
FROM FOR_SET F  JOIN FOR_SET1 F1 ON F.ID=F1.ID


SELECT * FROM ORDER_INFO

/*Self join*/
CREATE TABLE EMP_INFO(
ID INT,
NAME VARCHAR(10),
MANAGER_ID INT)

INSERT INTO EMP_INFO VALUES
(1,'SHREE', 1),
(2 ,'KALPANA',1),
(3, 'BHAWNA', 2),
(4, 'MONTY',2)

SELECT * FROM EMP_INFO

SELECT E.ID,E.NAME,M.NAME AS MANAGER_NAME
FROM EMP_INFO E JOIN EMP_INFO M ON E.ID = M.ID


SELECT E.ID, 
       E.Name as 'Emp_name', M.Name as 'Manager Name'
FROM Emp_info E 
         JOIN Emp_info M
            ON M.ID = E.MANAGER_ID


/*Natural Join*/


/*Cross join*/



/*Subquery*/ --NESTED 

select * from Orders

---order , CUSTOMERID is whose total order AMOUNT IS GREATER THAN AVERAGE OF TOTAL ORDER AMOUNT


SELECT *
FROM (SELECT OrderID, CustomerID, ORDERDATE,Total_order_amount
FROM Orders
WHERE Total_order_amount > (SELECT AVG(TOTAL_ORDER_AMOUNT) FROM Orders))D

/*CTE*/
WITH CTE AS(
SELECT * FROM Customers WHERE DateEntered < '2020-05-01')
SELECT * FROM CTE

SELECT * FROM(
SELECT * FROM Customers WHERE DateEntered < '2020-05-01')D


SELECT * FROM Orders


--- RETURN ALL THE CUSTOMER DETAILS WHOSE ORDER VALUE IS GRETER THAN AVERAGE


WITH CTE AS(
SQL STATEMENT 1
),
CTE2 AS (SQL STEMENT 2)
SELECT 
FROM CTE1 C JOIN CTE2 C2 ON C.ID=C2.ID


/*TEMP TABLE*/
SELECT * INTO #NEW_CUSTOMER FROM (
SELECT * FROM Customers WHERE DateEntered < '2020-05-01')S


SELECT * FROM #NEW_CUSTOMER

SELECT * FROM Customers

